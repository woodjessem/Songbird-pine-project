fig+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "paleturquoise1",colour = "lightgray",size = 0.5, linetype = "solid")) #or tan1 or lightsalmon or paleturquoise1
#fig+colScale+theme(panel.background = element_rect(fill = "gray",colour = "lightgray",size = 0.5, linetype = "solid"))
fig+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid")) #or tan1 or lightsalmon or paleturquoise1
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or paleturquoise1
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "navajowhite1",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or paleturquoise1
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "navajowhite2",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or paleturquoise1
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "lightorange",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "lightsalmon",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "lightsalmon1",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan1",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Rel_HW2P_canopy,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Relative hardwood to pine (in canopy)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
print(ggplot(vdata,aes(x=Nburns,y=Ldepth,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Litter depth (cm)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
print(ggplot(vdata,aes(x=Nburns,y=Ldepth,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.75)
+labs(x="Increasing # of burns",y="Litter depth (cm)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=Ccover,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.75)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
print(ggplot(vdata,aes(x=Nburns,y=Ldepth,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Litter depth (cm)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=BA,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Basal Area")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=FG_herb,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Herbaceous cover in understory")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-print(ggplot(vdata,aes(x=Nburns,y=HW_dens_1050,colour=Treatment))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Hardwood seedlings in understory")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-plot(Nthins ~ Age, vdata)
abline(lm(vdata$Nthins ~ vdata$Age),col="blue")
fig<-print(ggplot(vdata,aes(x=Nthins,y=Age,colour=Nthins))
+geom_jitter()
+geom_smooth(method=lm,fullrange=TRUE,color="black",size=0.5)
+labs(x="Increasing # of burns",y="Canopy cover (more dense)")
+scale_color_brewer(palette="Greens")+theme(panel.background = element_rect(fill = "tan",colour = "lightgray",size = 0.5, linetype = "solid"))) #or tan1 or lightsalmon1 or navajowhite2
fig<-plot(Nthins ~ Age, vdata)
abline(lm(vdata$Nthins ~ vdata$Age),col="blue")
fig<-plot(Herbicide ~ HW_dens_1050, vdata)
plot(Herbicide ~ HW_dens_1050, vdata)
plot(HW_dens_1050 ~ Herbicide, vdata)
summary(lm(Nthins~Age,vdata))
cor.test(vdata$Nthins,vdata$Age)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds")
richness <-read.csv("sr_covs.csv")
quantiles_95<-function(x){
r<-quantile(x,probs=c(0.025,0.25,0.5,0.75,0.975))
names(r)<-c("ymin","lower","middle","upper","ymax")
r
}
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+geom_jitter()+labs(x="Burn treatment",y="# Species")
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# Species")
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
levels(SR)
levels(Treatment)
levels(richness$Treatment)
View(richness)
richness <-read.csv("sr_covs.csv")
levels(richness$Treatment)
richness <-read.csv("sr_covs.csv")
levels(richness$Treatment)
quantiles_95<-function(x){
r<-quantile(x,probs=c(0.025,0.25,0.5,0.75,0.975))
names(r)<-c("ymin","lower","middle","upper","ymax")
r
}
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
#removed geom_jitter()
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="BlGn")+labs(x="Burn treatment",y="# of species")
richness <-read.csv("sr_covs.csv")
levels(richness$Treatment)
quantiles_95<-function(x){
r<-quantile(x,probs=c(0.025,0.25,0.5,0.75,0.975))
names(r)<-c("ymin","lower","middle","upper","ymax")
r
}
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="BlGn")+labs(x="Burn treatment",y="# of species")
#removed geom_jitter()
richness <-read.csv("sr_covs.csv")
levels(richness$Treatment)
quantiles_95<-function(x){
r<-quantile(x,probs=c(0.025,0.25,0.5,0.75,0.975))
names(r)<-c("ymin","lower","middle","upper","ymax")
r
}
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
#removed geom_jitter()
richness <-read.csv("sr_covs.csv")
levels(richness$Treatment)
quantiles_95<-function(x){
r<-quantile(x,probs=c(0.025,0.25,0.5,0.75,0.975))
names(r)<-c("ymin","lower","middle","upper","ymax")
r
}
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="BlGn")+labs(x="Burn treatment",y="# of species")
#removed geom_jitter()
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="GnBu")+labs(x="Burn treatment",y="# of species")
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
confint(lm(richness$SR~richness$Treatment))
library("ggplot2")
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment,ymin=18,ymax=34))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
#removed geom_jitter()
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+expand_limits(y=c(20,34)
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+expand_limits(y=c(20,34))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+expand_limits(y=c(20,34))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+expand_limits(y=c(20,32))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+ylim=c(20,34))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+ylim=c(20,34)
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+ylim=c(20,34)
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+ylim(20,34)
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+ylim(18,34)
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+coord_cartesian(ylim=c(20, 32)) +
scale_y_continuous(breaks=seq(18, 34, 2))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+coord_cartesian(ylim=c(18, 34)) +
scale_y_continuous(breaks=seq(18, 34, 2))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+coord_cartesian(ylim=c(19, 33)) +
scale_y_continuous(breaks=seq(18, 34, 2))
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+coord_cartesian(ylim=c(19, 33)) +
scale_y_continuous(breaks=seq(18, 34, 2))
+theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data=richness,aes(x=Treatment,y=SR,fill=Treatment))+guides(fill=F)+stat_summary(fun.data=quantiles_95,geom="boxplot")+scale_fill_brewer(type="seq",direction=1,palette="Greens")+labs(x="Burn treatment",y="# of species")+coord_cartesian(ylim=c(19, 33)) +
scale_y_continuous(breaks=seq(18, 34, 2))+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank())
library("unmarked")
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds")
tree.abund<- csvToUMF("Nesting_tree_pcount.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(tree.abund)= scale (obsCovs(tree.abund))
sc <- siteCovs(tree.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(tree.abund) <- sc
landmetrics.tree <- pcount (~ Wind + Noise
~ Parea + ShapeIndex
, tree.abund, mixture="P",K=80)
NewData.LandMetrics  <- data.frame(ShapeIndex=0, Parea=seq(min(sc$Parea),max(sc$Parea),length=100))
treeN.est.parea <- predict(landmetrics.tree, type="state",
newdata=NewData.LandMetrics,appendData=TRUE)
plot(Predicted~ Parea, data=treeN.est.parea, ylim=c(0,75), type="l", lwd=3,
xlab="Patch Area", ylab="Est. Tree-nester Abundance")
##95% confidence intervals
lines(lower~ Parea, data=treeN.est.parea,  type="l", lwd=3, col="darkgray")
lines(upper~ Parea, data=treeN.est.parea, type="l", lwd=3, col="darkgray")
plot(Predicted~ Parea, data=treeN.est.parea, ylim=c(0,180), type="l", lwd=3,
xlab="Patch Area", ylab="Est. Tree-nester Abundance")
##95% confidence intervals
lines(lower~ Parea, data=treeN.est.parea,  type="l", lwd=3, col="darkgray")
lines(upper~ Parea, data=treeN.est.parea, type="l", lwd=3, col="darkgray")
tree.abund<- csvToUMF("Nesting_tree_pcount.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(tree.abund)= scale (obsCovs(tree.abund))
sc <- siteCovs(tree.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(tree.abund) <- sc
landmetrics.tree <- pcount (~ Wind + Noise
~ Parea + ShapeIndex
, tree.abund, mixture="P",K=80)
NewData.LandMetrics  <- data.frame(ShapeIndex=0, Parea=seq(min(sc$Parea),max(sc$Parea),length=100))
treeN.est.parea <- predict(landmetrics.tree, type="state",
newdata=NewData.LandMetrics,appendData=TRUE)
plot(Predicted~ Parea, data=treeN.est.parea, ylim=c(0,200), type="l", lwd=3,
xlab="Patch Area", ylab="Est. Tree-nester Abundance")
##95% confidence intervals
lines(lower~ Parea, data=treeN.est.parea,  type="l", lwd=3, col="darkgray")
lines(upper~ Parea, data=treeN.est.parea, type="l", lwd=3, col="darkgray")
shrub.abund<- csvToUMF("Nesting_shrub_pcount.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(shrub.abund)= scale (obsCovs(shrub.abund))
sc <- siteCovs(shrub.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(shrub.abund) <- sc
lh.shrub <- pcount(~ Jdate + Noise + Time
~ BA + NHW_saplings + FG_shrub + HW_dens_1050
, shrub.abund, mixture="P", K=80)
greenberg.shrub <- pcount(~ Jdate + Noise + Time ~ BA + HW_dens_1050 + Nburns
, shrub.abund, mixture="P", K=80)
fms_top.shrubN <- fitList(lh.shrub, greenberg.shrub)
NewData.shrubN  <- data.frame(BA=seq(min(sc$BA),max(sc$BA),length=100),
NHW_saplings=0, FG_shrub=0, HW_dens_1050=0,
Nburns=0)
shrubN.est.ba <- predict(fms_top.shrubN, type="state", newdata=NewData.shrubN,appendData=TRUE)
plot(Predicted~ BA, data=shrubN.est.ba, ylim=c(0,40), type="l", lwd=3,
xlab="Basal Area (10-factor)", ylab="Est. Shrub-nester Abundance")
#95% confidence intervals
lines(lower~ BA, data=shrubN.est.ba, type="l", lwd=3, col="gray") #ylim=c(0,10)
lines(upper~ BA, data=shrubN.est.ba, type="l", lwd=3, col="gray") #ylim=c(0,10)
ground.abund<- csvToUMF("Nesting_ground_pcount.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(ground.abund)= scale (obsCovs(ground.abund))
sc <- siteCovs(ground.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(ground.abund) <- sc
landscape1.ground <- pcount(~ Jdate
~ Evergreen1km + HighDev1km + Schrubs1km + OpenDev1km
, ground.abund, mixture="P", K=80)
local.ground <- pcount(~ Jdate
~ Ccover + TreeHt + Ldepth
, ground.abund, mixture="P", K=80)
greenberg.ground <- pcount(~ Jdate ~ Ccover + Nsnags + Nburns + TimeSinceB + Ldepth
, ground.abund, mixture="P", K=80)
NewData.Landscape1  <- data.frame(HighDev1km=0, Schrubs1km=0, OpenDev1km=0,
Evergreen1km=seq(min(sc$Evergreen1km),max(sc$Evergreen1km),length=100))
groundN.est.evergreen1 <- predict(landscape1.ground, type="state",
newdata=NewData.Landscape1,appendData=TRUE)
plot(Predicted~ Evergreen1km, data=groundN.est.evergreen1, ylim=c(0,40), type="l", lwd=3,
xlab="Evergreen habitat within 1km of patch", ylab="Est. Ground-nester Abundance")
##95% confidence intervals
lines(lower~ Evergreen1km, data=groundN.est.evergreen1,  type="l", lwd=3, col="darkgray")
lines(upper~ Evergreen1km, data=groundN.est.evergreen1, type="l", lwd=3, col="darkgray")
plot(Predicted~ Evergreen1km, data=groundN.est.evergreen1, ylim=c(0,30), type="l", lwd=3,
xlab="Evergreen habitat within 1km of patch", ylab="Est. Ground-nester Abundance")
##95% confidence intervals
lines(lower~ Evergreen1km, data=groundN.est.evergreen1,  type="l", lwd=3, col="darkgray")
lines(upper~ Evergreen1km, data=groundN.est.evergreen1, type="l", lwd=3, col="darkgray")
plot(Predicted~ Evergreen1km, data=groundN.est.evergreen1, ylim=c(0,20), type="l", lwd=3,
xlab="Evergreen habitat within 1km of patch", ylab="Est. Ground-nester Abundance")
##95% confidence intervals
lines(lower~ Evergreen1km, data=groundN.est.evergreen1,  type="l", lwd=3, col="darkgray")
lines(upper~ Evergreen1km, data=groundN.est.evergreen1, type="l", lwd=3, col="darkgray")
plot(Predicted~ Evergreen1km, data=groundN.est.evergreen1, ylim=c(0,30), type="l", lwd=3,
xlab="Evergreen habitat within 1km of patch", ylab="Est. Ground-nester Abundance")
##95% confidence intervals
lines(lower~ Evergreen1km, data=groundN.est.evergreen1,  type="l", lwd=3, col="darkgray")
lines(upper~ Evergreen1km, data=groundN.est.evergreen1, type="l", lwd=3, col="darkgray")
fms_top.ground <- fitList(local.ground, greenberg.ground)
NewData.gn.ccover  <- data.frame(Ccover=seq(min(sc$Ccover),max(sc$Ccover),length=100),
TreeHt=0, Ldepth=0,Nsnags=0, Nburns=0, TimeSinceB=0)
groundN.est.ccover <- predict(fms_top.ground, type="state",
newdata=NewData.gn.ccover,appendData=TRUE)
plot(Predicted~ Ccover, data=groundN.est.ccover, ylim=c(0,40), type="l", lwd=3, xlab="Canopy Cover", ylab="Est. Ground-nester Abundance") ##ylim=c(0,10)
#95% confidence intervals
lines(lower~ Ccover, data=groundN.est.ccover, type="l", lwd=3, col="gray") #ylim=c(0,10)
lines(upper~ Ccover, data=groundN.est.ccover, type="l", lwd=3, col="gray") #ylim=c(0,10)
knitr::opts_chunk$set(echo = TRUE)
library(AICcmodavg)
library(unmarked)
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds")
#PIWA
piwa.abund<- csvToUMF("piwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(piwa.abund)= scale (obsCovs(piwa.abund))
sc <- siteCovs(piwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(piwa.abund) <- sc
landscape5.piwa <- pcount(~ Jdate + Time
~ Evergreen5km + HighDev5km
, piwa.abund, mixture="P", K=40)
#evergreen5km from landscape 5km model
NewData.Evergreen5km  <- data.frame(Evergreen5km= seq(min(sc$Evergreen5km),max(sc$Evergreen5km), length=100), HighDev5km = 0)
piwa.est.evergreen5km <- predict(landscape5.piwa, type="state", newdata=NewData.Evergreen5km,appendData=TRUE)
plot(Predicted~ Evergreen5km, data=piwa.est.evergreen5km, ylim=c(0,16), type="l", lwd=3, xlab="Evergreen habitat within 5km of patch", ylab="Est. PIWA Abundance")
##95% confidence intervals
lines(lower~ Evergreen5km, data=piwa.est.evergreen5km,  type="l", lwd=3, col="darkgray")
lines(upper~ Evergreen5km, data=piwa.est.evergreen5km, type="l", lwd=3, col="darkgray")
#PIWA
piwa.abund<- csvToUMF("piwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(piwa.abund)= scale (obsCovs(piwa.abund))
sc <- siteCovs(piwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(piwa.abund) <- sc
landscape30.piwa <- pcount(~ Jdate + Time
~ Evergreen30km + HighDev30km + Protected30km
, piwa.abund, mixture="P", K=40)
#High-Dev 30km
NewData.HighDev30km <- data.frame(Evergreen30km=0,
HighDev30km=seq(min(sc$HighDev30km),max(sc$HighDev30km), length=100),
Protected30km=0)
piwa.est.highdev30km <- predict(landscape30.piwa, type="state", newdata=NewData.HighDev30km,appendData=TRUE)
plot(Predicted~ HighDev30km, data=piwa.est.highdev30km, ylim=c(0,15), type="l", lwd=3, xlab="Highly Developed Area within 30km of patch", ylab="Est. PIWA Abundance")
##95% confidence intervals
lines(lower~ HighDev30km, data=piwa.est.highdev30km,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev30km, data=piwa.est.highdev30km, type="l", lwd=3, col="darkgray")
prwa.abund<- csvToUMF("prwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(prwa.abund)= scale (obsCovs(prwa.abund))
sc <- siteCovs(prwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(prwa.abund) <- sc
landscape5.prwa <- pcount(~ Jdate
~ Evergreen5km + Grass5km + HighDev5km + Schrubs5km
, prwa.abund, mixture="NB", K=60)
NewData.HighDev5km  <- data.frame(Evergreen5km=0, Grass5km=0, HighDev5km=seq(min(sc$HighDev5km),max(sc$HighDev5km),length=100), Schrubs5km=0)
prwa.est.highdev5 <- predict(landscape5.prwa, type="state",newdata=NewData.HighDev5km,appendData=TRUE)
#PRWA - landscape 5km model, high development variable
prwa.abund<- csvToUMF("prwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(prwa.abund)= scale (obsCovs(prwa.abund))
sc <- siteCovs(prwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(prwa.abund) <- sc
landscape5.prwa <- pcount(~ Jdate
~ Evergreen5km + Grass5km + HighDev5km + Schrubs5km
, prwa.abund, mixture="NB", K=60)
NewData.HighDev5km  <- data.frame(Evergreen5km=0, Grass5km=0, HighDev5km=seq(min(sc$HighDev5km),max(sc$HighDev5km),length=100), Schrubs5km=0)
prwa.est.highdev5 <- predict(landscape5.prwa, type="state",newdata=NewData.HighDev5km,appendData=TRUE)
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, ylim=c(0,5), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
prwa.abund<- csvToUMF("prwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(prwa.abund)= scale (obsCovs(prwa.abund))
sc <- siteCovs(prwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(prwa.abund) <- sc
landscape5.prwa <- pcount(~ Jdate
~ Evergreen5km + Grass5km + HighDev5km + Schrubs5km
, prwa.abund, mixture="NB", K=60)
NewData.HighDev5km  <- data.frame(Evergreen5km=0, Grass5km=0, HighDev5km=seq(min(sc$HighDev5km),max(sc$HighDev5km),length=100), Schrubs5km=0)
prwa.est.highdev5 <- predict(landscape5.prwa, type="state",newdata=NewData.HighDev5km,appendData=TRUE)
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, ylim=c(0,5), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, xlim=c(-1,1), ylim=c(0,5), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, xlim=c(-0.5,1), ylim=c(0,5), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, xlim=c(-0.8,1), ylim=c(0,5), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
prwa.abund<- csvToUMF("prwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(prwa.abund)= scale (obsCovs(prwa.abund))
sc <- siteCovs(prwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(prwa.abund) <- sc
landscape5.prwa <- pcount(~ Jdate
~ Evergreen5km + Grass5km + HighDev5km + Schrubs5km
, prwa.abund, mixture="NB", K=60)
NewData.HighDev5km  <- data.frame(Evergreen5km=0, Grass5km=0, HighDev5km=seq(min(sc$HighDev5km),max(sc$HighDev5km),length=100), Schrubs5km=0)
prwa.est.highdev5 <- predict(landscape5.prwa, type="state",newdata=NewData.HighDev5km,appendData=TRUE)
plot(Predicted~ HighDev5km, data=prwa.est.highdev5, ylim=c(0,4), type="l", lwd=3,
xlab="Highly developed area within 5km of patch", ylab="Est. PRWA Abundance")
##95% confidence intervals
lines(lower~ HighDev5km, data=prwa.est.highdev5,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev5km, data=prwa.est.highdev5, type="l", lwd=3, col="darkgray")
piwa.abund<- csvToUMF("piwa_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(piwa.abund)= scale (obsCovs(piwa.abund))
sc <- siteCovs(piwa.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(piwa.abund) <- sc
landscape30.piwa <- pcount(~ Jdate + Time
~ Evergreen30km + HighDev30km + Protected30km
, piwa.abund, mixture="P", K=40)
#High-Dev 30km
NewData.HighDev30km <- data.frame(Evergreen30km=0,
HighDev30km=seq(min(sc$HighDev30km),max(sc$HighDev30km), length=100),
Protected30km=0)
piwa.est.highdev30km <- predict(landscape30.piwa, type="state", newdata=NewData.HighDev30km,appendData=TRUE)
plot(Predicted~ HighDev30km, data=piwa.est.highdev30km, ylim=c(0,15), type="l", lwd=3, xlab="Highly Developed Area within 30km of patch", ylab="Est. PIWA Abundance")
##95% confidence intervals
lines(lower~ HighDev30km, data=piwa.est.highdev30km,  type="l", lwd=3, col="darkgray")
lines(upper~ HighDev30km, data=piwa.est.highdev30km, type="l", lwd=3, col="darkgray")
#INBU
inbu.abund<- csvToUMF("inbu_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(inbu.abund)= scale (obsCovs(inbu.abund))
sc <- siteCovs(inbu.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(inbu.abund) <- sc
disturbance.inbu <- pcount(~ Jdate
~ TimeSinceB + TimeSinceT
, inbu.abund, mixture="P", K=40)
#INBU - disturbance model, Time Since Burn variable
#experimentation#
newData.inbu<-data.frame(TimeSinceT=0, TimeSinceB=0:20)
newdata.inbu.est.timeburn<-predict(disturbance.inbu, type="state", newdata=newData.inbu, appendData=TRUE, 2)
plot(Predicted~ TimeSinceB, data=newdata.inbu.est.timeburn, ylim=c(0,5), type="l", lwd=3,
xlab="Time Since Burn (years)", ylab="Est. INBU Abundance")
##95% confidence intervals
lines(lower~ TimeSinceB, data=newdata.inbu.est.timeburn,  type="l", lwd=3, col="darkgray")
lines(upper~ TimeSinceB, data=newdata.inbu.est.timeburn, type="l", lwd=3, col="darkgray")
## keep below
NewData.TsinceB  <- data.frame(TimeSinceT= 0, TimeSinceB=seq(min(sc$TimeSinceB),max(sc$TimeSinceB), length=100))
inbu.est.timeburn <- predict(disturbance.inbu, type="state",
newdata=NewData.TsinceB,appendData=TRUE)
plot(Predicted~ TimeSinceB, data=inbu.est.timeburn, ylim=c(0,6), type="l", lwd=3,
xlab="Time Since Burn", ylab="Est. INBU Abundance")
##95% confidence intervals
lines(lower~ TimeSinceB, data=inbu.est.timeburn,  type="l", lwd=3, col="darkgray")
lines(upper~ TimeSinceB, data=inbu.est.timeburn, type="l", lwd=3, col="darkgray")
inbu.abund<- csvToUMF("inbu_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(inbu.abund)= scale (obsCovs(inbu.abund))
sc <- siteCovs(inbu.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(inbu.abund) <- sc
disturbance.inbu <- pcount(~ Jdate
~ TimeSinceB + TimeSinceT
, inbu.abund, mixture="P", K=40)
NewData.TsinceB  <- data.frame(TimeSinceT= 0, TimeSinceB=seq(min(sc$TimeSinceB),max(sc$TimeSinceB), length=100))
inbu.est.timeburn <- predict(disturbance.inbu, type="state",
newdata=NewData.TsinceB,appendData=TRUE)
plot(Predicted~ TimeSinceB, data=inbu.est.timeburn, ylim=c(0,5), type="l", lwd=3,
xlab="Time Since Burn", ylab="Est. INBU Abundance")
##95% confidence intervals
lines(lower~ TimeSinceB, data=inbu.est.timeburn,  type="l", lwd=3, col="darkgray")
lines(upper~ TimeSinceB, data=inbu.est.timeburn, type="l", lwd=3, col="darkgray")
nobo.abund<- csvToUMF("nobo_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(nobo.abund)= scale (obsCovs(nobo.abund))
sc <- siteCovs(nobo.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(nobo.abund) <- sc
lh.nobo <- pcount(~ Jdate + Wind + Sky + Noise +Time
~ BA + Ldepth + HW_dens_1050 + FG_shrub + Age
, nobo.abund, mixture="NB", K=80)
lh.nobo
confint(lh.nobo, type="state",method="normal")
treatment.nobo <- pcount(~ Jdate + Wind + Sky + Noise +Time
~ Nburns + Nthins
, nobo.abund, mixture ="NB", K=80)  #this one I made Nburns instead of treatment for ones with many many burns
NewData.Nthins  <- data.frame(Nburns= 0, Nthins=seq(min(sc$Nthins),max(sc$Nthins), length=100))
nobo.est.nthins <- predict(treatment.nobo, type="state",
newdata=NewData.Nthins,appendData=TRUE)
plot(Predicted~ Nthins, data=nobo.est.nthins, ylim=c(0,10), type="l", lwd=3,
xlab="Number of thinnings", ylab="Est. NOBO Abundance")
##95% confidence intervals
lines(lower~ Nthins, data=nobo.est.nthins,  type="l", lwd=3, col="darkgray")
lines(upper~ Nthins, data=nobo.est.nthins, type="l", lwd=3, col="darkgray")
nobo.abund<- csvToUMF("nobo_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(nobo.abund)= scale (obsCovs(nobo.abund))
sc <- siteCovs(nobo.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(nobo.abund) <- sc
treatment.nobo <- pcount(~ Jdate + Wind + Sky + Noise +Time
~ Nburns + Nthins
, nobo.abund, mixture ="NB", K=80)  #this one I made Nburns instead of treatment for ones with many many burns
NewData.Nthins  <- data.frame(Nburns= 0, Nthins=seq(min(sc$Nthins),max(sc$Nthins), length=100))
nobo.est.nthins <- predict(treatment.nobo, type="state",
newdata=NewData.Nthins,appendData=TRUE)
plot(Predicted~ Nthins, data=nobo.est.nthins, ylim=c(0,10), type="l", lwd=3,
xlab="Number of thinnings", ylab="Est. NOBO Abundance")
##95% confidence intervals
lines(lower~ Nthins, data=nobo.est.nthins,  type="l", lwd=3, col="darkgray")
lines(upper~ Nthins, data=nobo.est.nthins, type="l", lwd=3, col="darkgray")
eawp.abund<- csvToUMF("eawp_abund.csv", long = FALSE, type = "unmarkedFramePCount")
obsCovs(eawp.abund)= scale (obsCovs(eawp.abund))
sc <- siteCovs(eawp.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)])
siteCovs(eawp.abund) <- sc
landscape500.eawp <- pcount(~ Wind + Sky
~ Evergreen500m + Ag500m + HighDev500m
, eawp.abund, mixture="P", K=40)
local.eawp <- pcount(~ Wind + Sky
~ Ccover + TreeHt + Ldepth
, eawp.abund, mixture="P", K=40)
NewData.TreeHt  <- data.frame(TreeHt=seq(min(sc$TreeHt),max(sc$TreeHt), length=100),
Ccover=0,Ldepth=0)
eawp.est.treeht <- predict(local.eawp, type="state",
newdata=NewData.TreeHt,appendData=TRUE)
plot(Predicted~ TreeHt, data=eawp.est.treeht, ylim=c(0,5), type="l", lwd=3,
xlab="Tree height", ylab="Est. EAWP Abundance")
##95% confidence intervals
lines(lower~ TreeHt, data=eawp.est.treeht,  type="l", lwd=3, col="darkgray")
lines(upper~ TreeHt, data=eawp.est.treeht, type="l", lwd=3, col="darkgray")
