n0<-c(32,55,100)
n[1,]=n0 #make first row the initial population vector
#same f1,f2,s0,s1,s2 values as above, not retyped
#same M matrix as above, but defined again here, just in case chunks separated
M=matrix(0,3,3)
M[1,1]=f1*s0
M[1,2]=f2*s1
M[1,3]=f2*s2
M[2,1]=s0
M[3,2]=s1
M[3,3]=s2
I=matrix(0,3,3) #three by three matrix, [100,010,001]
I[1,1]=1
I[2,2]=1
I[3,3]=1
I<-diag(3)
#Equation: Nt+((K-Tnt)/(K))*(M-I)*Nt
Q=as.numeric() # Q=quotient term (K-Tnt)/K
Tnt<-sum(n[1,]) #T is the sum of all n abundances
for (yr in 2:tmax) {
Q[1]=((K-Tnt)/K)
n[yr,]=(n[yr-1,])+(Q)*(M-I)%*%n[yr-1,]
}
N=apply(n,1,sum) #add together the abundances in age classes
plot(1:tmax,N,"l",ylim=c(0,max(N)),xlab="Years")
library(spatstat)
library(spatstat)
library(sp)
library(rgdal)
library(maptools)
rare=readOGR(".", "Rare")
plot(rare)
rare.ppm<-as(rare,"ppp")
class(rare.ppm)
env.plot=envelope(test,Kest,nsim=99)
test<-ppm(rare.ppm ~1)
env.plot=envelope(test,Kest,nsim=99)
library(ppmlasso)
test<-ppm(rare.ppm ~1)
summary(test)
env.plot<-envelope(test, Kest, nsim=99)
plot(env.plot)
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Classes/Spatial Ecology/Movement_lab")
library(moveHMM)
library(moveHMM)
library(tseries)
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Classes/Spatial Ecology/Movement_lab")
library(moveHMM)
library(tseries)
rawBuffalo <- read.csv("Buffalo.csv")
head(rawBuffalo)
processedBuffalo <- prepData(rawBuffalo,type="UTM")
processedBuffalo
View(processedBuffalo)
buffalo<-subset(processedBuffalo,step>0,select="ID:temp")
buffalo<-subset(processedBuffalo,step>0,select=ID:temp)
subbuffalo<-subset(processedBuffalo,step>0,select=ID:temp)
buffalosub<-subset(processedBuffalo,step>0,select=ID:temp)
buffalosub
View(buffalosub)
plot(buffalosub)
summary(buffalosub$step)
sd(buffalosub$step)
summary(buffalosub$step) #1st quart
mu0 <- c(28,400) # step mean (two parameters: one for each state)
sigma0 <- c(0.5,1) # step SD
stepPar0 <- c(mu0,sigma0)
angleMean0 <- c(pi,0) # angle mean
kappa0 <- c(0.7,1.5) # angle concentration
anglePar0 <- c(angleMean0,kappa0)
beta0 <- matrix(c(-3,1,0.3,-0.5,-0.01,0.01),nrow=3,byrow=TRUE)
summary(buffalosub$angle) #min , 1st quart , 3rd quart , max
sd(buffalosub$angle)
summary(buffalosub$angle) #min -3.142, 1st quart -1.043, 3rd quart 1.016, max 3.142
m1 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~1) # no covariate
m2 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~temp) # covariate 'temp'
print(AIC(m1,m2))
plot(m1)
plot(m2)
buffalosub<-subset(processedBuffalo,step>0 & step<60,000,select=ID:temp)
buffalosub
View(buffalosub)
processedBuffalo <- prepData(rawBuffalo,type="UTM")
rawBuffalo <- read.csv("Buffalo.csv")
processedBuffalo <- prepData(rawBuffalo,type="UTM")
buffalosub<-subset(processedBuffalo,step>0 & step<60,000,select=ID:temp)
buffalosub
View(buffalosub)
rawBuffalo <- read.csv("Buffalo.csv")
processedBuffalo <- prepData(rawBuffalo,type="UTM")
buffalosub<-subset(processedBuffalo,step>0 & step<60000,select=ID:temp)
View(buffalosub)
plot(buffalosub)
summary(buffalosub$step) #min 0.82, 1st quart 28.80, 3rd quart 400.50, max 63100.00
sd(buffalosub$step)  #839.6601
summary(buffalosub$angle) #min -pi, 1st quart -1.043, 3rd quart 1.016, max pi  #mean -0.0105
mu0 <- c(20,400) # step mean (two parameters: one for each state)
sigma0 <- c(0.5,1) # step SD
stepPar0 <- c(mu0,sigma0)
angleMean0 <- c(pi,0) # angle mean
kappa0 <- c(0.7,1.5) # angle concentration - idk for this data
anglePar0 <- c(angleMean0,kappa0)
beta0 <- matrix(c(-3,1,0.3,-0.5,-0.01,0.01),nrow=3,byrow=TRUE)
m1 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~1) # no covariate
m2 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~temp) # covariate 'temp'
print(AIC(m1,m2))
plot(m1)
states <- viterbi(m1)
mu0 <- c(20,10000) # step mean (two parameters: one for each state)
sigma0 <- c(0.5,1) # step SD
stepPar0 <- c(mu0,sigma0)
angleMean0 <- c(pi,0) # angle mean
kappa0 <- c(0.7,1.5) # angle concentration - idk for this data
anglePar0 <- c(angleMean0,kappa0)
beta0 <- matrix(c(-3,1,0.3,-0.5,-0.01,0.01),nrow=3,byrow=TRUE)
m1 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~1) # no covariate
m2 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~temp) # covariate 'temp'
print(AIC(m1,m2))
plot(m1)
states <- viterbi(m1)
mu0 <- c(20,10000) # step mean (two parameters: one for each state)
sigma0 <- c(200,700) # step SD
stepPar0 <- c(mu0,sigma0)
angleMean0 <- c(pi,0) # angle mean
kappa0 <- c(0.7,1.5) # angle concentration - idk for this data
anglePar0 <- c(angleMean0,kappa0)
beta0 <- matrix(c(-3,1,0.3,-0.5,-0.01,0.01),nrow=3,byrow=TRUE)
m1 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~1) # no covariate
m2 <- fitHMM(data=buffalosub,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0, formula=~temp) # covariate 'temp'
plot(m1)
states <- viterbi(m1)
cat("Proportion of the time spent in state 2:",length(which(states==2))/length(states),"\n")
res <- pseudoRes(m1)
print(jarque.bera.test(res$step[which(!is.na(res$step))]))
print(jarque.bera.test(res$angle[which(!is.na(res$angle))]))
print(AIC(m1,m2))
res<-pseudoRes(m2)
print(jarque.bera.test(res$step[which(!is.na(res$step))]))  #issue with Nas
print(jarque.bera.test(res$angle[which(!is.na(res$angle))])) #worked
res <- pseudoRes(m1)
# normality test for step pseudo-residuals
print(jarque.bera.test(res$step[which(!is.na(res$step))]))  #issue with Nas
# normality test for angle pseudo-residuals
print(jarque.bera.test(res$angle[which(!is.na(res$angle))])) #worked
res<-pseudoRes(m2)
# normality test for step pseudo-residuals
print(jarque.bera.test(res$step[which(!is.na(res$step))]))  #issue with Nas
# normality test for angle pseudo-residuals
print(jarque.bera.test(res$angle[which(!is.na(res$angle))])) #worked
states <- viterbi(m1)
cat("Proportion of the time spent in state 2:",length(which(states==2))/length(states),"\n")
states <- viterbi(m2)
states <- viterbi(m2)
cat("Proportion of the time spent in state 2:",length(which(states==2))/length(states),"\n")
plot(m2)
head(rawBuffalo) #only four necessary columns
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Classes/Spatial Ecology")
library(spdep)
library(GISTools)
library(rgdal)
library(lattice)
library(maps)
library(maptools)
library(raster)
example(columbus)
?columbus
crime=(columbus$CRIME-min(columbus$CRIME))/max(columbus$CRIME)
hoval=(columbus$HOVAL-min(columbus$HOVAL))/max(columbus$HOVAL)
inc=(columbus$INC-min(columbus$INC))/max(columbus$INC)
plot(columbus,col=gray(1-crime))
plot(columbus,col=gray(1-hoval))
crime=(columbus$CRIME-min(columbus$CRIME))/max(columbus$CRIME)
hoval=(columbus$HOVAL-min(columbus$HOVAL))/max(columbus$HOVAL)
inc=(columbus$INC-min(columbus$INC))/max(columbus$INC)
plot(columbus,col=gray(1-crime))
plot(columbus,col=gray(1-hoval))
plot(columbus,col=gray(1-inc))
moran.test(columbus$CRIME,randomisation=FALSE, nb2listw(col.gal.nb,style="W"))
?nb2listw
?col.gal.nb
columbus.lm=lm(CRIME ~ INC + HOVAL,data=columbus)
summary(columbus.lm)
res=resid(columbus.lm)
res=(res-min(res))/diff(range(res))
plot(columbus,col=gray(1-res))
lm.morantest(columbus.lm,nb2listw(col.gal.nb,style="W"))
col.listw=nb2listw(col.gal.nb,style="W")
?col.listw
??col.listw
?nb2listw
col.listw
crime.sar=spautolm(CRIME ~ INC + HOVAL, data=columbus,col.listw,family="SAR")
summary(crime.sar)
col.list.car=similar.listw(col.listw)
crime.car=spautolm(CRIME ~ INC + HOVAL,data=columbus, col.list.car,family="CAR")
summary(crime.car)
col.listw=nb2listw(col.gal.nb,style="S") #changed to S second time thru (was W first)
crime.sar=spautolm(CRIME ~ INC + HOVAL, data=columbus,col.listw,family="SAR")
summary(crime.sar)
col.list.car=similar.listw(col.listw)
crime.car=spautolm(CRIME ~ INC + HOVAL,data=columbus, col.list.car,family="CAR")
summary(crime.car)
dam=readOGR(".", "dams00x020")
head(dam)
class(dam)
plot(dam)
proj4string(dam)
proj4string(dam)=CRS("+proj=longlat +ellps=WGS84")
data(tornados)
states=spTransform(us_states,CRS(proj4string(dam)))
num.dam=poly.counts(dam,states)
names(num.dam)=as.character(states$STATE_NAME)
states$num.dam=num.dam
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed output
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=3)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
moran.test(dams,randomisation=FALSE, nb2listw(col.gal.nb,style="W"))
head(dams)
moran.test(dam,randomisation=FALSE, nb2listw(col.gal.nb,style="W")) #dam$something
head(dam)
moran.test(states,randomisation=FALSE, nb2listw(col.gal.nb,style="W")) #dam$something
moran.test(dam$DAMS00X020,randomisation=FALSE, nb2listw(col.gal.nb,style="W")) #dam$something
moran.test(dam$CITY,randomisation=FALSE, nb2listw(col.gal.nb,style="W")) #dam$something
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Classes/Spatial Ecology")
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Classes/Spatial Ecology")
library(spdep)
library(geoR)
library(GISTools)
library(rgdal)
library(lattice)
library(maps)
library(maptools)
library(raster)
example(columbus)
?columbus
dam=readOGR(".", "dams00x020")
head(dam)
class(dam)
plot(dam)
proj4string(dam)
proj4string(dam)=CRS("+proj=longlat +ellps=WGS84")
data(tornados)
states=spTransform(us_states,CRS(proj4string(dam)))
num.dam=poly.counts(dam,states)
names(num.dam)=as.character(states$STATE_NAME)
states$num.dam=num.dam
head(num.dam)
class(num.dam)
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=3)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=3)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.sar=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?nb2listw
moran.test(num.dam,randomisation=FALSE, nb2listw(col.gal.nb,style="S")) #dam$something
moran.test(num.dam,randomisation=FALSE, nb2listw(col.gal.nb,style="W")) #dam$something
head(num.dam)
class(num.dam)
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="W")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=3)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
moran.test(num.dam,randomisation=FALSE, nb2listw(neigh.car,style="S")) #dam$something
dam.lists=nb2listw(neigh.car,style="S") #S or W
class(num.dam)
dam.lists=nb2listw(neigh.car,style="S") #S or W
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
moran.test(num.dam,randomisation=FALSE, nb2listw(neigh.car,style="S")) #dam$something
dam=readOGR(".", "dams00x020")
head(dam)   #longitude, latitude, county, city, OWN type, dam type, purposes, height, surf area, hazard, drain area, symbol, etc. lots of potential "covariates" but which make sense?
class(dam)
plot(dam)
proj4string(dam)
proj4string(dam)=CRS("+proj=longlat +ellps=WGS84")
data(tornados)
states=spTransform(us_states,CRS(proj4string(dam)))
num.dam=poly.counts(dam,states)
names(num.dam)=as.character(states$STATE_NAME)
states$num.dam=num.dam
head(num.dam)
class(num.dam)
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
moran.test(num.dam,randomisation=FALSE, nb2listw(boarder.share,style="S")) #dam$something
moran.test(dam,randomisation=FALSE, nb2listw(boarder.share,style="S")) #dam$something
head(dam)   #longitude, latitude, county, city, OWN type, dam type, purposes, height, surf area, hazard, drain area, symbol, etc. lots of potential "covariates" but which make sense?
moran.test(dam$SURF_AREA,randomisation=FALSE, nb2listw(boarder.share,style="S")) #dam$something
moran.test(num.dam,randomisation=FALSE, nb2listw(boarder.share,style="S")) #dam$something
dam.lm=lm(SURF_AREA ~ NID_HEIGHT,data=dam)
summary(dam.lm)
dam.lists=nb2listw(neigh.car,style="S") #S or W
damstuff.car=spautolm(SURF_AREA ~ NID_HEIGHT,data=num.dam, dam.list.car,family="CAR")
moran.test(num.dam,randomisation=FALSE, nb2listw(boarder.share,style="S"))
head(states)
dam.lists=nb2listw(neigh.car,style="S") #S or W
damstuff.car=spautolm(num.dam ~ states$AREA,data=states, dam.list.car,family="CAR")
damstuff.car=spautolm(num.dam ~ states$AREA,data=states, boarder.share,family="CAR")
?knn2nb
centers=coordinates(gCentroid(states,byid=TRUE))
neigh=knn2nb(knearneigh(centers,k=4)) #try k=3 and k=4 #idea was to see how they changed CAR model
plot(neigh,centers)
neigh.car=nb2listw(neigh,style="S")
boarder.share=poly2nb(states) #another way to specify a neighborhood
plot(boarder.share,coordinates(states))
dam.lists=nb2listw(neigh.car,style="S") #S or W
neigh.car=nb2listw(neigh,style="S")
dam.lists=nb2listw(neigh.car,style="W") #S or W
damstuff.car=spautolm(num.dam ~ states$AREA,data=states,  nb2listw(boarder.share,style="W"),family="CAR")
dam.lists=nb2listw(boarder.share,style="W") #S or W
dam.list.car=similar.listw(dam.lists)
damstuff.car=spautolm(num.dam ~ states$AREA,data=states, dam.list.car,family="CAR")
summary(damstuff.car)
head(states)
dam.listw=nb2listw(boarder.share,style="W") #S or W
dam.list.car=similar.listw(dam.listw)
dam.list.carw=similar.listw(dam.listw)
damstuff.car=spautolm(num.dam ~ states$AREA,data=states, dam.list.carw,family="CAR")
summary(damstuffw.car)  #There is no spatial autocorrelation in the number of dams data with respect to state area (p-value 0.55607, lambda 0.29113).  #AIC 591.39
damstuffw.car=spautolm(num.dam ~ states$AREA,data=states, dam.list.carw,family="CAR")
summary(damstuffw.car)  #There is no spatial autocorrelation in the number of dams data with respect to state area (p-value 0.55607, lambda 0.29113).  #AIC 591.39
dam.lm=lm(num.dam ~ states$AREA,data=states)
summary(dam.lm)
lm.morantest(dam.lm,nb2listw(dam.listw,style="W")) #even once included, still SAC! #S or W
lm.morantest(dam.lm,dam.list.carw) #even once included, still SAC! #S or W
dam.lists=nb2listw(boarder.share,style="S") #S or W
dam.list.cars=similar.listw(dam.lists)
damstuffs.car=spautolm(num.dam ~ states$AREA,data=states, dam.list.cars,family="CAR")
summary(damstuffs.car)  #There is no spatial autocorrelation in the number of dams data with respect to state area (p-value 0.55607, lambda 0.29113).  #AIC 591.39
moran.test(num.dam,randomisation=FALSE, dam.lists)
dam.lm=lm(num.dam ~ states$AREA,data=states)
summary(dam.lm) #uhhh... significance
lm.morantest(dam.lm,dam.list.cars)  #p-value 0.1955 indicates no clustering (no spatial autocorrelation)
library("unmarked")
setwd("C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds")
test <-read.csv("ybch_abund.csv")
summary(test)
?summary()
?summary
SStable <- summary(test)
write.table(SStable, file="C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds/covariate_summary_stats.xls",sep="\t")
rbwo.abund<- csvToUMF("rbwo_abund.csv", long = FALSE, type = "unmarkedFramePCount")
summary(rbwo.abund)
obsCovs(rbwo.abund)= scale (obsCovs(rbwo.abund))
sc <- siteCovs(rbwo.abund)
sc[,c(5:74)] <- scale(sc[, c(5:74)]) #from 26 to 74 +landscape+soils
siteCovs(rbwo.abund) <- sc
testP.rbwo <- pcount(~1 ~1, rbwo.abund, mixture="P", K=4)
testNB.rbwo <- pcount(~1 ~1, rbwo.abund, mixture="NB", K=4)
fmsTEST <- fitList(testP.rbwo, testNB.rbwo)
msTEST.rbwo <- modSel(fmsTEST)
msTEST.rbwo
det.null.rbwo <- pcount(~1 ~1, rbwo.abund, mixture="P", K=15)
det.weather.rbwo <- pcount(~ Wind + Sky ~1, rbwo.abund, mixture="P", K=15)
det.global.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~1, rbwo.abund, mixture="P", K=15)
det.sound.rbwo <- pcount(~ Noise + Wind ~1, rbwo.abund, mixture="P", K=15)
det.date.rbwo <- pcount(~ Jdate ~1, rbwo.abund, mixture="P", K=15)
det.detect.rbwo <- pcount(~ Jdate + Noise ~1, rbwo.abund, mixture="P", K=15)
det.notdate.rbwo <-pcount(~ Wind + Sky + Noise ~1, rbwo.abund, mixture="P", K=15)
fmsDC <- fitList(det.null.rbwo, det.weather.rbwo, det.global.rbwo,
det.sound.rbwo, det.date.rbwo, det.detect.rbwo, det.notdate.rbwo)
msDC.rbwo <- modSel(fmsDC)
msD.rbwo
msDC.rbwo
null.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~1
, rbwo.abund, mixture="P", K=120)
global.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Treatment + Herbicide + BA + Nsnags +Ccover
+ Ldepth + TreeHt + Age + TimeSinceB + TimeSinceT + Nthins
+ HWdens_1050 + FG_herb + FG_shrub + NHW_saplings + NP_over_20cm
+ Rel_HW2P_canopy + PISoils + FPSiteIndex + NSoilTypes
+ Parea + ShapeIndex
, rbwo.abund, mixture="P", K=120)
global.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Treatment + Herbicide + BA + Nsnags +Ccover
+ Ldepth + TreeHt + Age + TimeSinceB + TimeSinceT + Nthins
+ HW_dens_1050 + FG_herb + FG_shrub + NHW_saplings + NP_over_20cm
+ Rel_HW2P_canopy + PISoils + FPSiteIndex + NSoilTypes
+ Parea + ShapeIndex
, rbwo.abund, mixture="P", K=120)
local.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Ccover + TreeHt + Ldepth
, rbwo.abund, mixture="P", K=120) #can only include BA OR CCover
lh.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ TreeHt + CCover + NP_over_20cm + Rel_HW2P_canopy
, rbwo.abund, mixture="P", K=120) #consider adding Rel_HW2P_canopy
lh.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ TreeHt + Ccover + NP_over_20cm + Rel_HW2P_canopy
, rbwo.abund, mixture="P", K=120) #consider adding Rel_HW2P_canopy
landmetrics.rbwo <- pcount (~ Jdate + Wind + Sky + Noise
~ Parea + ShapeIndex
, rbwo.abund, mixture="P",K=120)
landscape500.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Evergreen500m + HighDev500m + Schrubs500m + Ag500m
, rbwo.abund, mixture="P", K=120)
landscape1.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Evergreen1km + HighDev1km + Schrubs1km + Ag1km
, rbwo.abund, mixture="P", K=120)
landscape5.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Evergreen5km + HighDev5km + Schrubs5km
, rbwo.abund, mixture="P", K=120)
landscape30.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Evergreen30km + HighDev30km +Protected30km
, rbwo.abund, mixture="P", K=120)
treatment.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Treatment + Nthins
, rbwo.abund, mixture ="P", K=120)
management.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Treatment + BA + TimeSinceB + TimeSinceT + Herbicide
, rbwo.abund, mixture="P", K=120)
disturbance.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ TimeSinceB + TimeSinceT
, rbwo.abund, mixture="P", K=120)
siteprod.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~ PISoils + FPSiteIndex + NSoilTypes
, rbwo.abund, mixture="P", K=120)
upstate.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~ Parea + HighDev
, rbwo.abund, mixture="P", K=120)
upstate.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~ Parea + HighDev5km
, rbwo.abund, mixture="P", K=120) #5km was pretty arbitrary
fms <- fitList(null.rbwo, global.rbwo, local.rbwo, lh.rbwo, landmetrics.rbwo,
landscape500.rbwo, landscape1.rbwo, landscape5.rbwo, landscape30.rbwo,
treatment.rbwo, management.rbwo, disturbance.rbwo,
siteprod.rbwo, upstate.rbwo)
ms.rbwo <- modSel(fms) #note this does not include
siteprod.rbwo <- pcount(~ Jdate + Wind + Sky + Noise ~ PISoils + NSoilTypes
, rbwo.abund, mixture="P", K=120) #FPSiteIndex removed
global.rbwo <- pcount(~ Jdate + Wind + Sky + Noise
~ Treatment + Herbicide + BA + Nsnags +Ccover
+ Ldepth + TreeHt + Age + TimeSinceB + TimeSinceT + Nthins
+ HW_dens_1050 + FG_herb + FG_shrub + NHW_saplings + NP_over_20cm
+ Rel_HW2P_canopy + PISoils + NSoilTypes
+ Parea + ShapeIndex
, rbwo.abund, mixture="P", K=120) #FPSiteIndex removed
fms <- fitList(null.rbwo, global.rbwo, local.rbwo, lh.rbwo, landmetrics.rbwo,
landscape500.rbwo, landscape1.rbwo, landscape5.rbwo, landscape30.rbwo,
treatment.rbwo, management.rbwo, disturbance.rbwo,
siteprod.rbwo, upstate.rbwo)
ms.rbwo <- modSel(fms) #remember FPSiteIndex removed from global & siteprod
ms.rbwo
landscape1.rbwo  #second best model, below d2.0
confint(landscape1.rbwo, type="state",method="normal")
write.table(ms.rbwo@Full, file="C:/Users/woodj/Documents/GRAD SCHOOL - CLEMSON/Project-Specific/R work/USDA-songbirds/USDA-songbirds/rbwo_top_models_ms.xls",sep="\t")
